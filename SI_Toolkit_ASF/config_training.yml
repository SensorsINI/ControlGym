library: 'TF'  # TF or Pytorch
#library: 'Pytorch'  # TF or Pytorch
modeling:
  NET_NAME: 'GRU-16H1-16H2'
paths:
  # PATH HAS TO END WITH A SOLIDUS ("/") CHARACTER
  path_to_experiment: 'Experiment-1/'
  PATH_TO_EXPERIMENT_FOLDERS: './Output/Experiments/'  # Path where the experiments data is stored

training_default:
  # For training closed loop dynamics model:
  control_inputs: ['u_0']
  state_inputs: ['x_1', 'x_2', 'x_3']  # Depends on the environment dimensionality
  setpoint_inputs: []  # Can be only 'target' or empty for CartPole
  outputs: ['x_1', 'x_2', 'x_3']  # Depends on the environment dimensionality
  translation_invariant_variables: []
  # For training open loop dynamics model:
  # inputs = ['position', 'positionD', 'angle_sin', 'angle_cos', 'angleD']
  # outputs = inputs_list
  # For training of RNN imitating MPC:
  # inputs = ['position', 'positionD', 'angle', 'angleD', 'target']
  # outputs = ['Q']
  EPOCHS: 5
  BATCH_SIZE: 16
  SEED: 1873
  LR:
    INITIAL: 1.0e-2
    MINIMAL: 1.0e-5
    PATIENCE: 1
    DECREASE_FACTOR: 0.316 # sqrt(0.1)
  WASH_OUT_LEN: 0
  POST_WASH_OUT_LEN: 1
  ON_FLY_DATA_GENERATION: False
  NORMALIZE: True
  SHIFT_LABELS: 0  # for k, as a label to row i is taken row i+k
  USE_NNI: False  # Decide if you want to use NNI package
  CONSTRUCT_NETWORK: 'with cells'  # Matters only for Pytorch; 'with cells' or 'with modules'
  VALIDATE_ALSO_ON_TRAINING_SET: true